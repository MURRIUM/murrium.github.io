{"version":3,"sources":["components/navigation-panel/navigation-panel.tsx","constants/navigation.constants.ts","components/header/header.tsx","components/inputs/text-field/text-field.tsx","healpers/cryptologic.healper.ts","components/inputs/button/button.tsx","components/cyptologic/greatest-common-factor-by-euclid/greatest-common-factor-by-euclid.tsx","components/cyptologic/line-decomposition-gcf/line-decomposition-gcf.tsx","components/cyptologic/eratisthenes-sieve/eratisthenes-sieve.tsx","components/cyptologic/canonical-decomposition-on-prime-numbers/canonical-decomposition-on-prime-numbers.tsx","components/cyptologic/euler-totient-function/euler-totient-function.tsx","components/cyptologic/find-inverse/find-inverse.tsx","components/main-page/main-page.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavigationPanel","props","changePathname","setState","pathname","window","location","state","items","this","forEach","item","push","renderItem","className","path","key","to","onClick","name","Component","NAVIGATION_ROUTES","ClHeader","TextField","value","placeholder","handleChange","bind","event","target","onInput","type","onChange","findGreatestCommonFactorByEuclid","firstNumber","secondNumber","swap","factor","lineDecompositionGCF","numberOne","numberTwo","x","y","quotient","Math","floor","length","result","decomposition","v","u","interpretation","eratisthenesSieve","limit","primeNumbers","divider","i","splice","j","canonicalDecompositionOnPrimeNumbers","inputNumber","numberForCount","countNumbers","singleNumber","countNumber","find","number","count","index","resultWithCounts","eulerTotientFunction","pow","findInverse","a","modM","undefined","Button","handleSubmit","GreatestCommonFactorByEuclid","changeFirstValue","firstValue","changeSecondValue","secondValue","calcResult","LineDecompositionGcf","EratisthenesSieve","changeValue","map","elem","CanonicalDecompositionOnPrimeNumbers","EulerTotientFunction","FindInverse","MainPage","exact","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.197fbcf4.chunk.js","sourcesContent":["import \"./navigation-panel.css\";\r\nimport React, {Component} from \"react\";\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\nimport {NavigationItem} from \"../../models/navigation-item.model\";\r\n\r\nexport interface NavigationPanelProps {\r\n    items: NavigationItem[];\r\n}\r\n\r\nexport interface NavigationPanelStates {\r\n    pathname: string;\r\n}\r\n\r\nclass NavigationPanel extends Component<NavigationPanelProps, NavigationPanelStates> {\r\n    constructor(props: NavigationPanelProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            pathname: window.location.pathname\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const items: JSX.Element[] = [];\r\n        const pathname = window.location.pathname;\r\n        this.props.items.forEach((item: NavigationItem) => items.push(this.renderItem(item, pathname)));\r\n\r\n        return (\r\n            <div className=\"cl-navigation-panel\">\r\n                {items}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderItem(item: NavigationItem, pathname?: string): JSX.Element {\r\n        return (\r\n            <Link className={pathname && pathname === item.path ?\r\n                                \"cl-navigation-panel__item _selected\":\r\n                                \"cl-navigation-panel__item\"\r\n                            }\r\n                  key={item.path}\r\n                  to={item.path}\r\n                  onClick={this.changePathname}\r\n            >\r\n                {item.name}\r\n            </Link>\r\n        );\r\n    }\r\n\r\n    changePathname = () => {\r\n        this.setState({pathname: window.location.pathname});\r\n    }\r\n}\r\n\r\nexport default NavigationPanel;\r\n","import {NavigationItem} from \"../models/navigation-item.model\";\r\n\r\nexport const NAVIGATION_ROUTES: NavigationItem[] = [\r\n    {\r\n        path: \"/\",\r\n        name: \"Home\"\r\n    },\r\n    {\r\n        path: \"/greatestCommonFactorByEuclid\",\r\n        name: \"1. Greatest Common Factor\"\r\n    },\r\n    {\r\n        path: \"/lineDecompositionGCF\",\r\n        name: \"2. Line Decomposition GCF\"\r\n    },\r\n    {\r\n        path: \"/eratisthenesSieve\",\r\n        name: \"3. Eratisthenes Sieve\"\r\n    },\r\n    {\r\n        path: \"/canonicalDecompositionOnPrimeNumbers\",\r\n        name: \"4. Canonical Decomposition\"\r\n    },\r\n    {\r\n        path: \"/eulerTotientFunction\",\r\n        name: \"5. Euler's Function\"\r\n    },\r\n    {\r\n        path: \"/findInverse\",\r\n        name: \"6. Find Inverse\"\r\n    }\r\n];\r\n","import \"./header.css\";\r\nimport React, {Component} from \"react\";\r\n\r\nclass ClHeader extends Component<any, any> {\r\n    render() {\r\n        return (\r\n            <div className=\"cl-header\">\r\n                <div className=\"cl-header__title\">Cryptologic Labs</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ClHeader;\r\n","import \"./text-field.css\";\r\nimport React, {Component} from \"react\";\r\n\r\nexport interface TextFieldProps {\r\n    value?: string;\r\n    placeholder?: string;\r\n    onInput: (value: string) => void;\r\n}\r\n\r\nexport interface TextFieldStates {\r\n    value?: string;\r\n    placeholder?: string;\r\n}\r\n\r\nclass TextField extends Component<TextFieldProps, TextFieldStates> {\r\n    constructor(props: TextFieldProps) {\r\n        super(props);\r\n        this.state = {\r\n            value: props.value || \"\",\r\n            placeholder: props.placeholder || \"\"\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(event: any) {\r\n        this.setState({value: event.target.value});\r\n        this.props.onInput(event.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"cl-text-field\">\r\n                <input className=\"cl-text-field__input\"\r\n                       type=\"text\"\r\n                       value={this.state.value}\r\n                       placeholder={this.state.placeholder}\r\n                       onChange={this.handleChange}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TextField;\r\n","/** Lab1 Greatest Common Factor By Euclid */\r\nexport function findGreatestCommonFactorByEuclid(firstNumber: number, secondNumber: number): number | null {\r\n    if (!firstNumber || !secondNumber) {\r\n        return null;\r\n    }\r\n\r\n    if (firstNumber < secondNumber) {\r\n        const swap = firstNumber;\r\n        firstNumber = secondNumber;\r\n        secondNumber = swap;\r\n    }\r\n\r\n    let factor = secondNumber;\r\n    while (firstNumber % factor) {\r\n        secondNumber = factor;\r\n        factor = firstNumber % factor;\r\n        firstNumber = secondNumber;\r\n    }\r\n\r\n    return factor;\r\n}\r\n\r\n/** Lab2  */\r\nexport interface LineDecompositionGCFModel {\r\n    result: number;\r\n    decomposition: DecompositionModel;\r\n    interpretation: string;\r\n}\r\n\r\nexport interface DecompositionModel {\r\n    firstNumber: number;\r\n    v: number;\r\n    secondNumber: number;\r\n    u: number;\r\n}\r\n\r\nexport function lineDecompositionGCF(firstNumber: number, secondNumber: number): LineDecompositionGCFModel | null {\r\n    if (!firstNumber || !secondNumber) {\r\n        return null;\r\n    }\r\n    if (firstNumber < secondNumber) {\r\n        const swap = firstNumber;\r\n        firstNumber = secondNumber;\r\n        secondNumber = swap;\r\n    }\r\n\r\n    let numberOne = firstNumber;\r\n    let numberTwo = secondNumber;\r\n\r\n    const x: number[] = [1, 0];\r\n    const y: number[] = [0, 1];\r\n    let factor = numberTwo;\r\n    let quotient = 0;\r\n    while (numberOne % factor) {\r\n        quotient = Math.floor(numberOne / factor);\r\n        numberTwo = factor;\r\n        factor = numberOne % factor;\r\n        numberOne = numberTwo;\r\n        x.push((x[x.length-2] - quotient * x[x.length-1]));\r\n        y.push((y[y.length-2] - quotient * y[y.length-1]));\r\n    }\r\n\r\n    return {\r\n        result: factor,\r\n        decomposition: {\r\n            firstNumber: firstNumber,\r\n            v: x[x.length-1],\r\n            secondNumber: secondNumber,\r\n            u: y[y.length-1]\r\n        },\r\n        interpretation: `${factor} = ${firstNumber} * ${x[x.length-1]} + ${secondNumber} * ${y[y.length-1]}`\r\n    };\r\n}\r\n\r\n/** lab3 */\r\nexport function eratisthenesSieve(limit: number): number[] | null {\r\n    if (!limit) {\r\n        return null;\r\n    }\r\n\r\n    const primeNumbers: number[] = [];\r\n    let divider = 2;\r\n\r\n    for (let i = 2; i <= limit; i++) {\r\n        primeNumbers.push(i);\r\n    }\r\n\r\n    while( (divider*divider) < limit ) {\r\n        for (let i = 0; i < primeNumbers.length; i++) {\r\n            if (primeNumbers[i] === divider) continue;\r\n            if (primeNumbers[i] % divider === 0) {\r\n                primeNumbers.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        for (let j = 0; j < primeNumbers.length; j++) {\r\n            if (primeNumbers[j] > divider) {\r\n                divider = primeNumbers[j];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return primeNumbers;\r\n}\r\n\r\n/** LAB4 canonical decomposition on prime numbers */\r\nexport interface CanonicalDecompositionOnPrimeNumbersModel {\r\n    result: number[],\r\n    resultWithCounts: CountNumber[],\r\n    interpretation: string;\r\n}\r\n\r\nexport interface CountNumber {\r\n    number: number;\r\n    count: number;\r\n}\r\n\r\nexport function canonicalDecompositionOnPrimeNumbers(inputNumber: number): CanonicalDecompositionOnPrimeNumbersModel | null {\r\n    if (!inputNumber) {\r\n        return null;\r\n    }\r\n    const decomposition: number[] = [];\r\n    let numberForCount = inputNumber;\r\n    let primeNumbers = eratisthenesSieve(1000);\r\n    if (!primeNumbers?.length) {\r\n        return null;\r\n    }\r\n    while (numberForCount !== 0) {\r\n        for (let i = 0; i < primeNumbers.length; i++) {\r\n            if (primeNumbers[i] > numberForCount) {\r\n                break;\r\n            }\r\n            while (numberForCount % primeNumbers[i] === 0) {\r\n                decomposition.push(primeNumbers[i]);\r\n                numberForCount = numberForCount / primeNumbers[i];\r\n            }\r\n        }\r\n        if (numberForCount) {\r\n            primeNumbers = eratisthenesSieve(numberForCount);\r\n        }\r\n        if (!primeNumbers?.length) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    const countNumbers: CountNumber[] = [];\r\n    decomposition.forEach((singleNumber: number) => {\r\n        const countNumber: CountNumber | undefined = countNumbers.find((item: CountNumber) => item.number === singleNumber);\r\n        if (countNumber) {\r\n            countNumber.count++;\r\n        } else {\r\n            countNumbers.push({\r\n               number: singleNumber,\r\n               count: 1\r\n            });\r\n        }\r\n    });\r\n\r\n    let interpretation = `${inputNumber} = `;\r\n    countNumbers.forEach((item: CountNumber, index: number) => {\r\n        if (index !== 0) {\r\n            interpretation += ` * `;\r\n        }\r\n        interpretation += item.count > 1 ? `${item.number}^${item.count}` : `${item.number}`;\r\n    });\r\n\r\n\r\n    return {\r\n        result: decomposition,\r\n        resultWithCounts: countNumbers,\r\n        interpretation: interpretation\r\n    };\r\n}\r\n\r\n/** lab5 Euler's totient function */\r\nexport function eulerTotientFunction(inputNumber: number): number | null {\r\n    if (!inputNumber) {\r\n        return null;\r\n    }\r\n\r\n    const decomposition: CountNumber[] | undefined = canonicalDecompositionOnPrimeNumbers(inputNumber)?.resultWithCounts;\r\n    if (!decomposition?.length) {\r\n        return null;\r\n    }\r\n    let result = 1;\r\n    decomposition.forEach((item: CountNumber) =>\r\n        result *= (Math.pow(item.number, item.count) - Math.pow(item.number, item.count-1))\r\n    );\r\n\r\n    return result;\r\n}\r\n\r\n/** lab6 */\r\nexport function findInverse(a: number, modM: number): number | null {\r\n    if (!a || !modM || a >= modM) {\r\n        return null;\r\n    }\r\n\r\n    let result = lineDecompositionGCF(modM, a)?.decomposition?.u;\r\n\r\n    if (result !== undefined) {\r\n        result = (result % modM + modM) % modM;\r\n    }\r\n\r\n    return result || null;\r\n}\r\n","import \"./button.css\";\r\nimport React, {Component} from \"react\";\r\n\r\nexport interface ButtonProps {\r\n    name?: string;\r\n    onClick?: () => void;\r\n}\r\n\r\nclass Button extends Component<ButtonProps, any> {\r\n\r\n    handleSubmit = () => {\r\n        this.props.onClick && this.props.onClick();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"cl-button\">\r\n                <input className=\"cl-button__input\"\r\n                       type=\"submit\"\r\n                       value={this.props.name}\r\n                       onClick={this.handleSubmit}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Button;\r\n","import \"../cryptologic.styles.css\";\r\nimport React, {Component} from \"react\";\r\nimport TextField from \"../../inputs/text-field/text-field\";\r\nimport {findGreatestCommonFactorByEuclid} from \"../../../healpers/cryptologic.healper\";\r\nimport Button from \"../../inputs/button/button\";\r\n\r\nexport interface GreatestCommonFactorByEuclidStates {\r\n    firstValue: number;\r\n    secondValue: number;\r\n    result: number;\r\n}\r\n\r\nclass GreatestCommonFactorByEuclid extends Component<any, GreatestCommonFactorByEuclidStates> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            firstValue: 0,\r\n            secondValue: 0,\r\n            result: 0\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"cl-cryptologic\">\r\n                <div className=\"cl-cryptologic__title\">\r\n                    1. Greatest Common Factor By Euclid\r\n                </div>\r\n                <div className=\"cl-cryptologic__inputs\">\r\n                    <div className=\"cl-cryptologic__input\">\r\n                        <TextField placeholder=\"First Value\"\r\n                                   onInput={this.changeFirstValue}\r\n                        />\r\n                    </div>\r\n                    <div className=\"cl-cryptologic__input\">\r\n                        <TextField placeholder=\"Second Value\"\r\n                                   onInput={this.changeSecondValue}\r\n                        />\r\n                    </div>\r\n                    <div className=\"cl-cryptologic__input\">\r\n                        <Button name=\"Calculate\" onClick={this.calcResult}/>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"cl-cryptologic__results\">\r\n                    <div className=\"cl-cryptologic__result\">\r\n                        Result: {this.state.result || \"Please enter values\"}\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    changeFirstValue = (value: string) => {\r\n        this.setState({firstValue: +value || 0}, () => {\r\n            //this.calcResult();\r\n        });\r\n    };\r\n\r\n    changeSecondValue = (value: string) => {\r\n        this.setState({secondValue: +value || 0}, () => {\r\n            //this.calcResult();\r\n        });\r\n    };\r\n\r\n    calcResult = () => {\r\n        if (this.state.firstValue && this.state.secondValue) {\r\n            this.setState({result: findGreatestCommonFactorByEuclid(this.state.firstValue, this.state.secondValue) || 0});\r\n        } else {\r\n            this.setState({result: 0});\r\n        }\r\n    }\r\n}\r\n\r\nexport default GreatestCommonFactorByEuclid;\r\n","import \"../cryptologic.styles.css\";\r\nimport React, {Component} from \"react\";\r\nimport TextField from \"../../inputs/text-field/text-field\";\r\nimport {lineDecompositionGCF, LineDecompositionGCFModel} from \"../../../healpers/cryptologic.healper\";\r\nimport Button from \"../../inputs/button/button\";\r\n\r\nexport interface LineDecompositionGcfModel {\r\n    firstValue: number;\r\n    secondValue: number;\r\n    result: LineDecompositionGCFModel | null;\r\n}\r\n\r\nclass LineDecompositionGcf extends Component<any, LineDecompositionGcfModel> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            firstValue: 0,\r\n            secondValue: 0,\r\n            result: null\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"cl-cryptologic\">\r\n                <div className=\"cl-cryptologic__title\">\r\n                    2. Line Decomposition Greatest Common Factor By Euclid\r\n                </div>\r\n                <div className=\"cl-cryptologic__inputs\">\r\n                    <div className=\"cl-cryptologic__input\">\r\n                        <TextField placeholder=\"First Value\"\r\n                                   onInput={this.changeFirstValue}\r\n                        />\r\n                    </div>\r\n                    <div className=\"cl-cryptologic__input\">\r\n                        <TextField placeholder=\"Second Value\"\r\n                                   onInput={this.changeSecondValue}\r\n                        />\r\n                    </div>\r\n                    <div className=\"cl-cryptologic__input\">\r\n                        <Button name=\"Calculate\" onClick={this.calcResult}/>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"cl-cryptologic__results\">\r\n                    <div className=\"cl-cryptologic__result\">\r\n                        Result: {this.state.result?.result || \"Please enter values\"}\r\n                    </div>\r\n                    <div className=\"cl-cryptologic__result\">\r\n                        Interpretation: {this.state.result?.interpretation || \"\"}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    changeFirstValue = (value: string) => {\r\n        this.setState({firstValue: +value || 0});\r\n    };\r\n\r\n    changeSecondValue = (value: string) => {\r\n        this.setState({secondValue: +value || 0});\r\n    };\r\n\r\n    calcResult = () => {\r\n        if (this.state.firstValue && this.state.secondValue) {\r\n            this.setState({result: lineDecompositionGCF(this.state.firstValue, this.state.secondValue) || null});\r\n        } else {\r\n            this.setState({result: null});\r\n        }\r\n    }\r\n}\r\n\r\nexport default LineDecompositionGcf;\r\n","import \"../cryptologic.styles.css\";\r\nimport React, {Component} from \"react\";\r\nimport TextField from \"../../inputs/text-field/text-field\";\r\nimport {eratisthenesSieve} from \"../../../healpers/cryptologic.healper\";\r\nimport Button from \"../../inputs/button/button\";\r\n\r\nexport interface EratisthenesSieveModel {\r\n    value: number;\r\n    result: number[] | null;\r\n}\r\n\r\nclass EratisthenesSieve extends Component<any, EratisthenesSieveModel> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            value: 0,\r\n            result: null\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"cl-cryptologic\">\r\n                <div className=\"cl-cryptologic__title\">\r\n                    3. Eratisthene's Sieve\r\n                </div>\r\n                <div className=\"cl-cryptologic__inputs\">\r\n                    <div className=\"cl-cryptologic__input\">\r\n                        <TextField placeholder=\"Value\"\r\n                                   onInput={this.changeValue}\r\n                        />\r\n                    </div>\r\n                    <div className=\"cl-cryptologic__input\">\r\n                        <Button name=\"Calculate\" onClick={this.calcResult}/>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"cl-cryptologic__results\">\r\n                    <div className=\"cl-cryptologic__result\">\r\n                        Result: {this.state.result?.map((elem: number, index: number) =>\r\n                        index === 0 ?\r\n                            `${elem}` :\r\n                            `, ${elem}`\r\n                    ) || \"Please enter values\"}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    changeValue = (value: string) => {\r\n        this.setState({value: +value || 0});\r\n    };\r\n\r\n    calcResult = () => {\r\n        if (this.state.value) {\r\n            this.setState({result: eratisthenesSieve(this.state.value) || null});\r\n        } else {\r\n            this.setState({result: null});\r\n        }\r\n    }\r\n}\r\n\r\nexport default EratisthenesSieve;\r\n","import \"../cryptologic.styles.css\";\r\nimport React, {Component} from \"react\";\r\nimport TextField from \"../../inputs/text-field/text-field\";\r\nimport {canonicalDecompositionOnPrimeNumbers, CanonicalDecompositionOnPrimeNumbersModel} from \"../../../healpers/cryptologic.healper\";\r\nimport Button from \"../../inputs/button/button\";\r\n\r\nexport interface CanonicalDecompositionOnPrimeNumbersComponentModel {\r\n    value: number;\r\n    result: CanonicalDecompositionOnPrimeNumbersModel | null;\r\n}\r\n\r\nclass CanonicalDecompositionOnPrimeNumbers extends Component<any, CanonicalDecompositionOnPrimeNumbersComponentModel> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            value: 0,\r\n            result: null\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"cl-cryptologic\">\r\n                <div className=\"cl-cryptologic__title\">\r\n                    4. Canonical Decomposition On Prime Numbers\r\n                </div>\r\n                <div className=\"cl-cryptologic__inputs\">\r\n                    <div className=\"cl-cryptologic__input\">\r\n                        <TextField placeholder=\"Value\"\r\n                                   onInput={this.changeValue}\r\n                        />\r\n                    </div>\r\n                    <div className=\"cl-cryptologic__input\">\r\n                        <Button name=\"Calculate\" onClick={this.calcResult}/>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"cl-cryptologic__results\">\r\n                    <div className=\"cl-cryptologic__result\">\r\n                        Result: {this.state.result?.result.map((elem: number, index: number) =>\r\n                        index === 0 ?\r\n                            `${elem}` :\r\n                            `, ${elem}`\r\n                    ) || \"Please enter values\"}\r\n                    </div>\r\n                    <div className=\"cl-cryptologic__result\">\r\n                        Interpretation: {this.state.result?.interpretation || \"\"}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    changeValue = (value: string) => {\r\n        this.setState({value: +value || 0});\r\n    };\r\n\r\n    calcResult = () => {\r\n        if (this.state.value) {\r\n            this.setState({result: canonicalDecompositionOnPrimeNumbers(this.state.value) || null});\r\n        } else {\r\n            this.setState({result: null});\r\n        }\r\n    }\r\n}\r\n\r\nexport default CanonicalDecompositionOnPrimeNumbers;\r\n","import \"../cryptologic.styles.css\";\r\nimport React, {Component} from \"react\";\r\nimport TextField from \"../../inputs/text-field/text-field\";\r\nimport {eratisthenesSieve, eulerTotientFunction} from \"../../../healpers/cryptologic.healper\";\r\nimport Button from \"../../inputs/button/button\";\r\n\r\nexport interface EulerTotientFunctionModel {\r\n    value: number;\r\n    result: number;\r\n}\r\n\r\nclass EulerTotientFunction extends Component<any, EulerTotientFunctionModel> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            value: 0,\r\n            result: 0\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"cl-cryptologic\">\r\n                <div className=\"cl-cryptologic__title\">\r\n                    5. Euler Totient Function\r\n                </div>\r\n                <div className=\"cl-cryptologic__inputs\">\r\n                    <div className=\"cl-cryptologic__input\">\r\n                        <TextField placeholder=\"Value\"\r\n                                   onInput={this.changeValue}\r\n                        />\r\n                    </div>\r\n                    <div className=\"cl-cryptologic__input\">\r\n                        <Button name=\"Calculate\" onClick={this.calcResult}/>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"cl-cryptologic__results\">\r\n                    <div className=\"cl-cryptologic__result\">\r\n                        Result: {this.state.result || \"Please enter values\"}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    changeValue = (value: string) => {\r\n        this.setState({value: +value || 0});\r\n    };\r\n\r\n    calcResult = () => {\r\n        if (this.state.value) {\r\n            this.setState({result: eulerTotientFunction(this.state.value) || 0});\r\n        } else {\r\n            this.setState({result: 0});\r\n        }\r\n    }\r\n}\r\n\r\nexport default EulerTotientFunction;\r\n","import \"../cryptologic.styles.css\";\r\nimport React, {Component} from \"react\";\r\nimport TextField from \"../../inputs/text-field/text-field\";\r\nimport {findInverse} from \"../../../healpers/cryptologic.healper\";\r\nimport Button from \"../../inputs/button/button\";\r\n\r\nexport interface FindInverseStates {\r\n    firstValue: number;\r\n    secondValue: number;\r\n    result: number;\r\n}\r\n\r\nclass FindInverse extends Component<any, FindInverseStates> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            firstValue: 0,\r\n            secondValue: 0,\r\n            result: 0\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"cl-cryptologic\">\r\n                <div className=\"cl-cryptologic__title\">\r\n                    6. Find Inverse\r\n                </div>\r\n                <div className=\"cl-cryptologic__inputs\">\r\n                    <div className=\"cl-cryptologic__input\">\r\n                        <TextField placeholder=\"Value\"\r\n                                   onInput={this.changeFirstValue}\r\n                        />\r\n                    </div>\r\n                    <div className=\"cl-cryptologic__input\">\r\n                        <TextField placeholder=\"Mod M\"\r\n                                   onInput={this.changeSecondValue}\r\n                        />\r\n                    </div>\r\n                    <div className=\"cl-cryptologic__input\">\r\n                        <Button name=\"Calculate\" onClick={this.calcResult}/>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"cl-cryptologic__results\">\r\n                    <div className=\"cl-cryptologic__result\">\r\n                        Result: {this.state.result || \"Please enter values (Value should be less then M)\"}\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    changeFirstValue = (value: string) => {\r\n        this.setState({firstValue: +value || 0});\r\n    };\r\n\r\n    changeSecondValue = (value: string) => {\r\n        this.setState({secondValue: +value || 0});\r\n    };\r\n\r\n    calcResult = () => {\r\n        if (this.state.firstValue && this.state.secondValue) {\r\n            this.setState({result: findInverse(this.state.firstValue, this.state.secondValue) || 0});\r\n        } else {\r\n            this.setState({result: 0});\r\n        }\r\n    }\r\n}\r\n\r\nexport default FindInverse;\r\n","import \"./main-page.css\";\r\nimport React, {Component} from \"react\";\r\nimport NavigationPanel from \"../navigation-panel/navigation-panel\";\r\nimport {\r\n    Switch,\r\n    Route,\r\n    BrowserRouter as Router\r\n} from \"react-router-dom\";\r\nimport {NAVIGATION_ROUTES} from \"../../constants/navigation.constants\";\r\nimport ClHeader from \"../header/header\";\r\nimport GreatestCommonFactorByEuclid from \"../cyptologic/greatest-common-factor-by-euclid/greatest-common-factor-by-euclid\";\r\nimport {canonicalDecompositionOnPrimeNumbers, eratisthenesSieve, eulerTotientFunction, findInverse, lineDecompositionGCF} from \"../../healpers/cryptologic.healper\";\r\nimport LineDecompositionGcf from \"../cyptologic/line-decomposition-gcf/line-decomposition-gcf\";\r\nimport EratisthenesSieve from \"../cyptologic/eratisthenes-sieve/eratisthenes-sieve\";\r\nimport CanonicalDecompositionOnPrimeNumbers from \"../cyptologic/canonical-decomposition-on-prime-numbers/canonical-decomposition-on-prime-numbers\";\r\nimport EulerTotientFunction from \"../cyptologic/euler-totient-function/euler-totient-function\";\r\nimport FindInverse from \"../cyptologic/find-inverse/find-inverse\";\r\n\r\n\r\n\r\nexport interface MainPageProps {}\r\n\r\nexport interface MainPageStates {}\r\n\r\nclass MainPage extends Component<MainPageProps, MainPageStates> {\r\n\r\n    render() {\r\n        // console.log(lineDecompositionGCF(1234, 54));\r\n        // console.log(lineDecompositionGCF(2, 5));\r\n        // console.log(lineDecompositionGCF(11, 26));\r\n        // console.log(eratisthenesSieve(100));\r\n        // console.log(canonicalDecompositionOnPrimeNumbers(82798848));\r\n        // console.log(canonicalDecompositionOnPrimeNumbers(81057226635));\r\n        // console.log(canonicalDecompositionOnPrimeNumbers(2001413));\r\n        // console.log(canonicalDecompositionOnPrimeNumbers(999999));\r\n        // console.log(eulerTotientFunction(999999));\r\n        // console.log(findInverse(9, 11));\r\n        // console.log(findInverse(11, 26));\r\n        return (\r\n            <div className=\"cl-main-page\">\r\n                <div className=\"cl-main-page__header\">\r\n                    <ClHeader/>\r\n                </div>\r\n                <div className=\"cl-main-page__body\">\r\n                    <Router>\r\n                        <div className=\"cl-main-page__navigation-panel\">\r\n                            <NavigationPanel items={NAVIGATION_ROUTES} />\r\n                        </div>\r\n                        <div className=\"cl-main-page__content\">\r\n                            <Switch>\r\n                                <Route path=\"/\" exact>\r\n                                    <div className=\"cl-main-page__home\">Home</div>\r\n                                </Route>\r\n                                <Route path=\"/greatestCommonFactorByEuclid\" exact>\r\n                                    <GreatestCommonFactorByEuclid/>\r\n                                </Route>\r\n                                <Route path=\"/lineDecompositionGCF\" exact>\r\n                                    <LineDecompositionGcf/>\r\n                                </Route>\r\n                                <Route path=\"/eratisthenesSieve\" exact>\r\n                                    <EratisthenesSieve/>\r\n                                </Route>\r\n                                <Route path=\"/canonicalDecompositionOnPrimeNumbers\" exact>\r\n                                    <CanonicalDecompositionOnPrimeNumbers/>\r\n                                </Route>\r\n                                <Route path=\"/eulerTotientFunction\" exact>\r\n                                    <EulerTotientFunction/>\r\n                                </Route>\r\n                                <Route path=\"/findInverse\" exact>\r\n                                    <FindInverse/>\r\n                                </Route>\r\n                            </Switch>\r\n                        </div>\r\n                    </Router>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default MainPage;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport MainPage from \"./components/main-page/main-page\";\n\nfunction App() {\n    return (\n        <div className=\"cl-main-app\">\n            <MainPage/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}